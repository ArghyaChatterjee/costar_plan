#!/usr/bin/env python

from __future__ import print_function

import os
import matplotlib as mpl
mpl.use("Agg")

from costar_models import *
from costar_models.datasets.npz import NpzDataset
from costar_models.datasets.npy_generator import NpzGeneratorDataset
from costar_models.datasets.h5f_generator import H5fGeneratorDataset
import six

'''
Tool for running model training without the rest of the simulation/planning/ROS
code. This should be more or less independent and only rely on a couple
external features.
'''

def main(args):
    ConfigureGPU(args)
    verbose = 1

    # this data file parameter should use the glob syntax
    data_file = args['data_file']
    data_file_info = data_file.split('.')
    data_type = data_file_info[-1]
    print('Loading dataset from globbed directory: \n' + str(data_file))
    if ".npz" in data_file:
        dataset = NpzGeneratorDataset(data_file, preload=args['preload'])
        sample = dataset.load(success_only=args['success_only'], max_img_size=args['max_img_size'])
    elif ".h5f" in data_file:
        dataset = H5fGeneratorDataset(data_file, preload=args['preload'])
        sample = dataset.load(success_only=args['success_only'], max_img_size=args['max_img_size'])
    else:
        raise NotImplementedError('data type not implemented: %s' % data_type)
    if verbose > 0:
        # print('num keys: ' + str(len(six.iteritems(sample))))
        debug_str = 'ctp_model_tool::main sample.keys: '
        for i, (key, value) in enumerate(six.iteritems(sample)):
            print(str(i) + ' ' + str(key))
            debug_str = debug_str + str(key) + ', '
        print(debug_str)

    if 'model' in args and args['model'] is not None:
        model = MakeModel(taskdef=None, **args)
        if 'load_model' in args and args['load_model']:
            model.load(world=None, **sample)
        train_generator = model.trainGenerator(dataset)
        test_generator = model.testGenerator(dataset)
        interrupt=False
        try:
            model.trainFromGenerators(train_generator, test_generator, sample)
        except KeyboardInterrupt:
            interrupt=True
        #except Exception as e:
        #    print(e)
        #    pass
        if model.save_model:
            model.save()
        if args['debug_model']:
            model.plot(env)
            try:
                while True:
                    time.sleep(0.1)
            except KeyboardInterrupt:
                pass
        if not interrupt:
            path = model.model_directory
            id = model.unique_id
            with open(os.path.join(path, 'status' + id + '.txt'), 'a+') as f:
                f.write(" finished\n")
    else:
        pass

if __name__ == '__main__':
    args = ParseModelArgs()
    if args['profile']:
        import cProfile
        cProfile.run('main(args)')
    else:
        main(args)
