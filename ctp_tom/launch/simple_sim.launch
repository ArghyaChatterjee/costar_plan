<?xml version="1.0"?>
<launch>

	<!--arg name="scene" default="full"/-->
  <arg name="scene" default="lacquey"/>
  
  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false"/>

  <!-- By default do not bring up rviz -->
  <arg name="rviz" default="false"/>

  <!-- If slave, then we are connecting to a remote simulation -->
  <arg name="slave" default="true"/>

  <!-- simulation mode -->
  <param name="use_sim_time" value="false"/>

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find tom_full_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
    <arg name="robot" default="$(arg scene)"/>
  </include>

  <!-- loading the Park position as TOM zero position -->
  <rosparam command="load" file="$(find tom_description)/config/tom_zeros.yaml"/>

  <!-- If needed, broadcast static tf for robot root -->
  <!--node pkg="tf" type="static_transform_publisher" name="virtual_joint_broadcaster_0vis" args="0 0 0 0 0 0 odom_combined base_footprint 1000" /-->
  
  <node pkg="tf"
    type="static_transform_publisher"
    name="world_joint_broadcaster"
    args="0 0 0 0 0 0 base_link world 1000" />

  <!--<node pkg="tf"
    type="static_transform_publisher"
    name="base_joint_broadcaster"
    args="0 0 0 0 0 0 base_footprint base_link 1000" />-->

  <!-- If needed, broadcast static tf for robot root -->
  <!--node pkg="tf" type="static_transform_publisher" name="left_hand_desired" args="-0.01 0 0 0 0 0 l_hand_base_link left_hand_desired_ef 10" /-->

  <!-- loading the Park position as TOM zero position -->
  <rosparam command="load" file="$(find tom_description)/config/tom_zeros.yaml"/>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="tom_sim" type="tom_sim.py" pkg="ctp_tom"/>

  <!-- start up the DMP server -->
  <include file="$(find dmp)/launch/dmp.launch"/>
  
  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publishervis"
    pkg="robot_state_publisher"
    type="robot_state_publisher"
    respawn="false"
    output="screen" />

  <!-- Bring up a separate rviz node from the controllers if this is being run
       as a part of a single distributed system (with TOM the real robot,
       for example) -->
  <node name="rvizvis_sim"
    if="$(arg rviz)"
    pkg="rviz"
    type="rviz"
    args="-d $(find ctp_tom)/launch/rviz_conf/tom_robot.rviz" />

  <!-- we do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publishervis" pkg="joint_state_publisher" type="joint_state_publisher" unless="$(arg slave)">
    <param name="/use_gui" value="false"/> 
   	<rosparam param="source_list">[right_arm_joint_states, left_arm_joint_states, right_fingers_joint_states, left_fingers_joint_states, base_group_joint_states]</rosparam>
  </node>



  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find tom_full_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="false"/>  
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

</launch>
